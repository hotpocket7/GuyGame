package game.level;

import com.jogamp.opengl.GL2;
import game.Game;
import game.entity.*;
import game.graphics.*;
import game.graphics.light.Light;
import game.level.block.*;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import game.math.Vec2d;
import org.json.*;

public class Level {

    private static Level hubLevel, scienceLevel;

    private int id;

    public static Level currentLevel;
    public static ArrayList<Level> levels = new ArrayList<>();

    public ArrayList<Block> blocks = new ArrayList<>();
    public ArrayList<Light> lights = new ArrayList<>();
    public ArrayList<Entity> entities = new ArrayList<>();

    public HashMap<String, Entity> entityMap = new HashMap<>();

    public Vec2d spawn = new Vec2d();

    private SpriteSheet background;

    public Color4f ambientColor = new Color4f();
    private int lightBlendFunc;

    static {
        hubLevel = new Level("/maps/hub.json", SpriteSheet.tileSet1, SpriteSheet.levelBG1, 0,
                new Color4f(0x10/255f, 0x10/255f, 0x1a/255f, 1));
        hubLevel.setLightBlendFunc(1);

        scienceLevel = new Level("/maps/science.json", SpriteSheet.tileSet1, SpriteSheet.levelBG2, 1,
                new Color4f(.8f, .8f, .8f, 1));
        scienceLevel.setLightBlendFunc(0);

        setLevel(scienceLevel);
    }

    public int width, height; // in pixels

    public Level(String path, SpriteSheet tileSet, SpriteSheet background, int id, Color4f ambientColor){
        this.ambientColor.setEqual(ambientColor);
        this.id = id;
        levels.add(this);
        this.background = background;
        try {
            loadLevelFromFile(path);
        } catch (JSONException | IOException e) {
            e.printStackTrace();
        }
        create();
    }

    public void create(){}

    protected void loadLevelFromFile(String path) throws IOException, JSONException {
        //Levels are stored in JSON files generated by Tiled
        new LevelLoader(path, this).load();
    }

    public void update() {
        blocks.stream().filter(block -> block.active && block.isOnScreen()).forEach(Block::update);
        entities.stream().filter(entity -> entity.active && entity.isOnScreen()).forEach(Entity::update);

        entities.stream().filter(Entity::isCollider).forEach(entity -> entity.pollCollisions(entities));
        entities.stream().filter(Entity::isCollider).forEach(entity -> entity.pollCollisions(blocks));

        ArrayList<Block> destroyedBlocks = new ArrayList<>();
        ArrayList<Entity> destroyedEntities = new ArrayList<>();

        blocks.stream().filter(Block::isDestroyed).forEach(destroyedBlocks::add);
        entities.stream().filter(Entity::isDestroyed).forEach(destroyedEntities::add);

        destroyedBlocks.forEach(this::removeEntity);
        destroyedEntities.forEach(this::removeEntity);
    }

    public void render(GL2 gl) {
        background.renderSprite(0, Game.scene.getCamera(), new Vec2d(0, 0), 0, 0, false, false, gl);

        blocks.stream().filter(b -> b.active).forEach(b -> b.render(gl));
        entities.stream().filter(e -> e.active).forEach(e -> e.render(false, false, gl));

        Game.scene.getPlayer().render(gl);

        if(lights.size() > 0) {
            //Lights are rendered to a light map FBO, which is then blended with the fully lit scene by multiplying
            //the colors
            prepareLightMap(gl);
            renderLightMap(gl);
        }

    }

    private void prepareLightMap(GL2 gl) {
        gl.glBindFramebuffer(GL2.GL_FRAMEBUFFER, Game.scene.getLightMapFbo()[0]);
        gl.glLoadIdentity();

        gl.glEnable(GL2.GL_BLEND);
        gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
        gl.glClearColor(ambientColor.r, ambientColor.g, ambientColor.b, 1);
        gl.glClear(GL2.GL_COLOR_BUFFER_BIT);

        lights.forEach(l -> l.render(gl));

        gl.glDisable(GL2.GL_BLEND);
    }

    private void renderLightMap(GL2 gl) {
        float w = Game.scene.getWidth();
        float h = Game.scene.getHeight();
        float x = 0;
        float y = 0;
        gl.glLoadIdentity();

        gl.glBindFramebuffer(GL2.GL_FRAMEBUFFER, 0);
        gl.glEnable(GL2.GL_TEXTURE_2D);
        gl.glBindTexture(GL2.GL_TEXTURE_2D, Game.scene.getLightMapTexture()[0]);

        gl.glEnable(GL2.GL_BLEND);
        switch(lightBlendFunc) {
            case 0:
                gl.glBlendFunc(GL2.GL_DST_COLOR, GL2.GL_ZERO);
                break;
            case 1:
                gl.glBlendFunc(GL2.GL_DST_COLOR, GL2.GL_SRC_COLOR);
                break;
            default:
                gl.glBlendFunc(GL2.GL_SRC_ALPHA, GL2.GL_ONE_MINUS_SRC_ALPHA);
        }
        gl.glBegin(GL2.GL_QUADS);
            gl.glColor4f(1, 1, 1, 1);

            gl.glTexCoord2f(0, 1);
            gl.glVertex2f(x, y);

            gl.glTexCoord2f(0, 0);
            gl.glVertex2f(x, y + h);

            gl.glTexCoord2f(1, 0);
            gl.glVertex2f(x + w, y + h);

            gl.glTexCoord2f(1, 1);
            gl.glVertex2f(x+w, y);
        gl.glEnd();
        gl.glDisable(GL2.GL_BLEND);
        gl.glDisable(GL2.GL_TEXTURE_2D);
    }

    public synchronized void restart() {
        Game.scene.getPlayer().active = true;
        Game.scene.getPlayer().position.setEqual(spawn);
        Game.scene.getPlayer().velocity.setEqual(new Vec2d(0, 0));
        Game.scene.getPlayer().state = Player.State.AIRBORNE;
        Game.scene.getPlayer().jumpsUsed = 0;

        blocks.stream().filter(Block::isTemporary).forEach(Block::destroy);
        entities.stream().filter(Entity::isTemporary).forEach(Entity::destroy);

        blocks.forEach(Block::respawn);
        entities.forEach(Entity::respawn);
    }

    public void addEntity(Entity entity) {
        if(entity instanceof Block) {
            blocks.add((Block) entity);
            return;
        }
        entities.add(entity);
    }


    public void removeEntity(Entity entity) {
        if(blocks.contains(entity))
            blocks.remove(entity);
        entities.remove(entity);
    }

    public void addLight(Light light) {
        lights.add(light);
    }

    public int getId() { return id; }

    public static Level getCurrentLevel() {
        return currentLevel;
    }

    public static void setLevel(int lvl) {
        Level level = levels.get(lvl);
        setLevel(level);
    }

    public static void setLevel(Level level) {
        currentLevel = level;
        Game.scene.getPlayer().position.setEqual(level.spawn);
    }

    public void setLightBlendFunc(int id) {
        lightBlendFunc = id;
    }

    public void setSpawn(Vec2d spawn) {
        this.spawn.setEqual(spawn);
    }
}
